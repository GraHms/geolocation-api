// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: geolocation.sql

package db

import (
	"context"
	"database/sql"
)

const createGeolocation = `-- name: CreateGeolocation :one
INSERT INTO geolocations (
    country_code, city_name, ip_address, latitude, longitude, mystery
) VALUES (
             $1, $2, $3, $4, $5, $6
         )
RETURNING id, country_code, city_name, ip_address, latitude, longitude, mystery, created_at
`

type CreateGeolocationParams struct {
	CountryCode sql.NullString `json:"country_code"`
	CityName    sql.NullString `json:"city_name"`
	IpAddress   sql.NullString `json:"ip_address"`
	Latitude    sql.NullString `json:"latitude"`
	Longitude   sql.NullString `json:"longitude"`
	Mystery     sql.NullString `json:"mystery"`
}

func (q *Queries) CreateGeolocation(ctx context.Context, arg CreateGeolocationParams) (Geolocations, error) {
	row := q.db.QueryRowContext(ctx, createGeolocation,
		arg.CountryCode,
		arg.CityName,
		arg.IpAddress,
		arg.Latitude,
		arg.Longitude,
		arg.Mystery,
	)
	var i Geolocations
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.CityName,
		&i.IpAddress,
		&i.Latitude,
		&i.Longitude,
		&i.Mystery,
		&i.CreatedAt,
	)
	return i, err
}

const getGeolocation = `-- name: GetGeolocation :one
SELECT id, country_code, city_name, ip_address, latitude, longitude, mystery, created_at FROM geolocations
WHERE ip_address = $1 LIMIT 1
`

func (q *Queries) GetGeolocation(ctx context.Context, ipAddress sql.NullString) (Geolocations, error) {
	row := q.db.QueryRowContext(ctx, getGeolocation, ipAddress)
	var i Geolocations
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.CityName,
		&i.IpAddress,
		&i.Latitude,
		&i.Longitude,
		&i.Mystery,
		&i.CreatedAt,
	)
	return i, err
}
